package app.regulars.mainoffice.order;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.ParameterMode;
import javax.persistence.Query;

import app.MessageFactory;
import app.PUFactory;
import model.Employee;
import model.Lineitem;
import model.Orderplacement;
import model.Product;
import model.Suppliedby;
import model.Vendor;

public class OrderController {
	
	private static EntityManager em;
	
	////////////////////////////////////////////////////
	
	@SuppressWarnings("unchecked")
	public static List<CustomSuppliedbyModel> findAvailableVendors(int productNum) {
		List<CustomSuppliedbyModel> result;
		List<Object[]> temp;

		em = PUFactory.FACTORY.createEntityManager();

		temp = 	em.createStoredProcedureQuery("findAvailableVendors")
				.registerStoredProcedureParameter("productNum", Integer.class, ParameterMode.IN)
				.setParameter("productNum", productNum)
				.getResultList();

		em.close();

		result = new ArrayList<>();

		int vendorNum, quantityAvailable;
		double unitPriceAvailable;
		String vendorName, productName;
		for (Object[] x : temp) {
			vendorNum 			= (int) x[0];
			productNum 			= (int) x[1];
			quantityAvailable 	= (int) x[2];
			unitPriceAvailable	= (double) x[3];
			
			vendorName 			= x[4].toString();
			productName 		= x[5].toString();
		
			result.add(new CustomSuppliedbyModel(
						vendorNum,
						productNum,
						quantityAvailable,
						unitPriceAvailable,
						vendorName,
						productName
						
					));
		}
		
		return result;
	}
	
	////////////////////////////////////////////////////
	
	public static int createOrderPlacement(String SSN) {
		Employee employee = new Employee(SSN);
		
		Orderplacement op = new Orderplacement();
		op.setRequestDate(new Date(System.currentTimeMillis()));
		
		em = PUFactory.FACTORY.createEntityManager();
		em.getTransaction().begin();

		// add record to DB
		op.setEmployee(employee);
		em.persist(op);

		em.getTransaction().commit();

		// retrieve the newly created order number generated by the DB
		em.refresh(op);

		em.clear();
		em.close();
		return op.getOrderNum();
	}
	
	////////////////////////////////////////////////////
	
	public static void removeOrderPlacement(Orderplacement op) {
		em = PUFactory.FACTORY.createEntityManager();
		em.getTransaction().begin();

		// make sure that the order exist
		op = em.find(Orderplacement.class, op.getOrderNum());
		if (op != null)
			em.remove(op);
		
		em.getTransaction().commit();

		em.clear();
		em.close();
	}
	
	////////////////////////////////////////////////////

	public static Lineitem checkLineItemExistence(int orderNum, int vendorNum, int productNum) {
		Lineitem li = null;
		Object o;
		Query q;
		
		em = PUFactory.FACTORY.createEntityManager();
		
		q = em.createNativeQuery("select * from lineitems where orderNum = ? and vendorNum = ? and productNum = ?")
				.setParameter(1, orderNum)
				.setParameter(2, vendorNum)
				.setParameter(3, productNum);
		
		// not check for error yet		
		try {
			
			em.getTransaction().begin();
			o =  q.getSingleResult();
			em.getTransaction().commit();
			em.clear();
			
			if (o != null)
				li = new Lineitem(new Orderplacement(orderNum), new Vendor(vendorNum), new Product(productNum));
			
			return li;
			
		} catch (Exception e) {
			
			return null;
			
		} finally {
			em.close();	
		}
	}
	
	////////////////////////////////////////////////////
	
	public static void createLineItem(Lineitem li) {		
		
		em = PUFactory.FACTORY.createEntityManager();
		
		// not check for error yet
		
		em.getTransaction().begin();
		em.persist(li);
		em.getTransaction().commit();
		em.clear();
		
		em.close();
	}
	
	////////////////////////////////////////////////////
	
	public static void removeLineItem(Lineitem li) {		
		Query q;
		
		em = PUFactory.FACTORY.createEntityManager();
		
		q = em.createNativeQuery("delete from lineitems where orderNum = ? and vendorNum = ? and productNum = ?")
				.setParameter(1, li.getOrderplacement().getOrderNum())
				.setParameter(2, li.getVendor().getVendorNum())
				.setParameter(3, li.getProduct().getProductNum());
		
		// not check for error yet
		em.getTransaction().begin();
		
		q.executeUpdate();
		
		em.getTransaction().commit();
		em.clear();
		
		em.close();
	}
	
	////////////////////////////////////////////////////
	
	public static void removeLineitems(List<CustomSuppliedbyModel> l) {
		for (CustomSuppliedbyModel x : l) {
			removeLineItem(new Lineitem(
						new Orderplacement(x.getOrderNumber()),
						new Vendor(x.getVendorNum()),
						new Product(x.getProductNum())
					));
		}
	}
	
	////////////////////////////////////////////////////
	
	public static int placeOrder(String SSN, List<CustomSuppliedbyModel2> l) {
		
		int orderNum = -1;
		
		// create OrderPlacement instance
		orderNum = createOrderPlacement(SSN);
		
		for (int i = 0, size = l.size(); i < size; ++i) {

			// create line items
			createLineItem(new Lineitem(
						new Orderplacement(orderNum),
						new Vendor(l.get(i).getVendorNum()),
						new Product(l.get(i).getProductNum()),
						l.get(i).getQuantityAvailable(),
						l.get(i).getUnitPriceAvailable()
					));
			
		}

		MessageFactory.inform("Orders created successful!");
		
		return orderNum;
	}
	
	////////////////////////////////////////////////////
	
	public static void removeOrderPlacement(int orderNum) {
		Orderplacement o = new Orderplacement(orderNum);
		
		em = PUFactory.FACTORY.createEntityManager();
		
		em.getTransaction().begin();
		
		o = em.find(Orderplacement.class, orderNum);
		
		if (o != null)
			em.remove(o);
		
		em.getTransaction().commit();
		em.clear();
		
		em.close();
	}
	
	////////////////////////////////////////////////////
	
	public static void updateAvailableQuantity(Suppliedby s) {
		Query q;
		
		em = PUFactory.FACTORY.createEntityManager();
		
		q = em.createNativeQuery(
					"update suppliedby " +
					"set quantityAvailable = ? " +
					"where vendorNum = ? and productNum = ?")
				.setParameter(1, s.getQuantityAvailable())
				.setParameter(2, s.getVendor().getVendorNum())
				.setParameter(3, s.getProduct().getProductNum());
		
		// not check for error yet
		em.getTransaction().begin();
		
		q.executeUpdate();
		
		em.getTransaction().commit();
		em.clear();
		
		em.close();
	}

}
